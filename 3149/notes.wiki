https://leetcode.com/problems/find-the-minimum-cost-array-permutation
clang -Wall 1.c -o /tmp/minCost && /tmp/minCost

You are given an array nums which is a permutation of [0, 1, 2, ..., n - 1].
score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[n - 1] - nums[perm[0]]|
Input: nums = [1,0,2]
Output: [0,1,2]
The cost of this permutation is |0 - 0| + |1 - 2| + |2 - 1| = 2.

If multiple permutations exist with this score, return the one that is lexicographically smallest among them.

Constraints:
2 <= n == nums.length <= 14
nums is a permutation of [0, 1, 2, ..., n - 1].

14!
87.178.291.200 max possible solutions

1,0,2 numbers
0,1,2 permutation
1,0,2 resolved
0,2,1 l-shifted

cost = distance(permutation, l-shifted)
0,0
1,2
2,1
cost: 2

0,1 numbers
0,1 permutation
0,1 resolved
1,0 l-shifted
cost: 2

0,1 numbers
1,0 permutation
1,0 resolved
0,1 l-shifted
cost: 0

1,0,2 numbers
1,0,2 permutation
0,1,2 resolved
1,2,0 l-shifted
cost: 4

1,0,2 numbers
2,0,1 permutation
2,1,0 resolved
1,0,2 l-shifted
cost: 2

is cost 0 possible with uneven?
2,0,1 numbers
0,1,2 permutation
2,0,1 resolved
0,1,2 l-shifted
cost: 0

if numbers are in order, best cost is 0?

2 3 0 1 numbers
0     2 permutation
2     0 resolved
    0 2 l-shifted
cost: at least 2

2 3 0 1 numbers
1     3 permutation
3     1 resolved
    1 3 l-shifted
cost: at least 2

2 3 0 1 numbers
2     0 permutation
0     2 resolved
    2 0 l-shifted
cost: at least 2

2 3 0 1 numbers
        permutation
        resolved
        l-shifted

to have cost 0, if numbers are ordered, resolved has to be ordered too
and distance of rotation has to be 1 move
1,3 and 0,2 exchange between perm and resolved ... so distance of rotation is 2 moves
        0 1 2 3
becomes 2 3 0 1
... as result, perm order will not overlap with resolved order

back to question:
if numbers are in order, best cost is 0?
... no, for cost to be 0 it's not enough that numbers are ordered

