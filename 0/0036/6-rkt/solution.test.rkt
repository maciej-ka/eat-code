#lang racket
(require rackunit rackunit/text-ui "solution.rkt")

(define tests
  (test-suite "solution suite"

    (test-case "test 1"
      (check-equal?
        (is-valid-sudoku
          '[[#\5 #\3 #\. #\. #\7 #\. #\. #\. #\.]
            [#\6 #\. #\. #\1 #\9 #\5 #\. #\. #\.]
            [#\. #\9 #\8 #\. #\. #\. #\. #\6 #\.]
            [#\8 #\. #\. #\. #\6 #\. #\. #\. #\3]
            [#\4 #\. #\. #\8 #\. #\3 #\. #\. #\1]
            [#\7 #\. #\. #\. #\2 #\. #\. #\. #\6]
            [#\. #\6 #\. #\. #\. #\. #\2 #\8 #\.]
            [#\. #\. #\. #\4 #\1 #\9 #\. #\. #\5]
            [#\. #\. #\. #\. #\8 #\. #\. #\7 #\9]])
        #t
      ))

    (test-case "test 2"
      (check-equal?
        (is-valid-sudoku
          '[[#\8 #\3 #\. #\. #\7 #\. #\. #\. #\.]
            [#\6 #\. #\. #\1 #\9 #\5 #\. #\. #\.]
            [#\. #\9 #\8 #\. #\. #\. #\. #\6 #\.]
            [#\8 #\. #\. #\. #\6 #\. #\. #\. #\3]
            [#\4 #\. #\. #\8 #\. #\3 #\. #\. #\1]
            [#\7 #\. #\. #\. #\2 #\. #\. #\. #\6]
            [#\. #\6 #\. #\. #\. #\. #\2 #\8 #\.]
            [#\. #\. #\. #\4 #\1 #\9 #\. #\. #\5]
            [#\. #\. #\. #\. #\8 #\. #\. #\7 #\9]])
        #f
      ))

    ))
(run-tests tests)
